(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var i=e.g.document;if(!t&&i&&(i.currentScript&&(t=i.currentScript.src),!t)){var n=i.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"assets/imgs/companies/edval.jpg",i=e.p+"assets/imgs/companies/zoomo.jpg",n=e.p+"assets/imgs/companies/cape.svg",s=e.p+"assets/imgs/companies/woolies.jpg",a=e.p+"assets/imgs/companies/flare.svg",r=e.p+"assets/imgs/companies/md.png",o=e.p+"assets/imgs/companies/brilliance.png",l=e.p+"assets/imgs/companies/hcl.png",c=e.p+"assets/imgs/companies/cba.svg";var p,m;!function(e){e.expert="Expert",e.intermediate="Average",e.beginner="Beginner"}(p||(p={})),function(e){e.rc="react",e.ng="ng",e.bs="bs",e.cs="cs",e.net="net",e.netframework="netframework",e.ts="ts",e.ef="efcore",e.sql="sql",e.pg="pg",e.cos="cos",e.firebase="firebase",e.gcloud="gcloud",e.az="az",e.aws="aws",e.servicebus="servicebus",e.iothub="iothub",e.nodejs="nodejs",e.jq="jq"}(m||(m={}));var d=function(){function e(){}return e.items=[{type:"Intro",id:"intro",summary:"I am seeking a Cloud based Web Development position where I can utilize my skills to help the team go in the right direction and improve my skills in design and development using a wide variety of technologies and tools.",education:["Bachelor of Engineering in Computer Science | Score: 89% | India | May 2009","Higher Secondary Course | Score: 93% | India | March 2005"],certifications:[{name:"MCSD App Builder",validSince:"Dec 2017",externalLink:"https://www.youracclaim.com/badges/b6ca70e8-a9ca-404c-9430-de506b59e7b4/linked_in_profile"}]},{type:"Skills",id:"skills",skills:[{name:m.ng,description:"Angular",proficiency:p.expert,years:8},{name:m.cs,description:"CSharp",proficiency:p.expert,years:12},{name:m.net,description:".NET Core",proficiency:p.expert,years:5},{name:m.ts,description:"Typescript",proficiency:p.expert,years:8},{name:m.az,description:"Azure",proficiency:p.expert,years:6},{name:m.servicebus,description:"Azure Service Bus",proficiency:p.expert,years:4},{name:m.sql,description:"SQL Server",proficiency:p.expert,years:12},{name:m.cos,description:"Cosmos DB",proficiency:p.expert,years:5},{name:m.ef,description:"Entity Framework",proficiency:p.intermediate,years:4},{name:m.aws,description:"AWS",proficiency:p.intermediate,years:1},{name:m.rc,description:"React",proficiency:p.intermediate,years:1},{name:m.pg,description:"PostgreSQL",proficiency:p.intermediate,years:1},{name:m.gcloud,description:"Google Cloud",proficiency:p.intermediate,years:1},{name:m.iothub,description:"Azure IoT Hub",proficiency:p.beginner,years:1}]},{type:"Experience",id:"edval",logoUrl:"".concat(t),companyName:"Edval Timetables",companyShort:"Edval",role:"Lead Software Engineer",roleShort:"Lead Engineer",yearFrom:"Jul 2022",yearTo:"Present",skills:[m.rc,m.net,m.cs,m.aws,m.ef,m.pg],summary:"Edval is an expert in creating timetabling solutions for schools. Edval software suite is used by over 1400 schools across 16 countries. With 99% customer retention rate, Edval is considered as a market leader.",responsibilities:["Creating Microservice based tech solutions for timetabling problems while ensuring strict privacy compliance by following GDPR and enforcing other regional rules.","Mentoring team, perform code review to ensure code quality and review/improve engineering practices."],achievements:[]},{type:"Experience",id:"zoomo",logoUrl:"".concat(i),companyName:"Zoomo",companyShort:"Zoomo",role:"Lead Software Engineer",roleShort:"Lead Engineer",yearFrom:"Sep 2021",yearTo:"Jun 2022",skills:[m.ng,m.net,m.cs,m.az,m.iothub,m.servicebus,m.ef,m.sql,m.cos],summary:"Zoomo is the world's leader in light electric vehicles (LEVs) and aftermarket servicing, built on the experience of thousands of delivery riders. With the recent completion of $80 million Series B round, Zoomo strives to provide best software solutions to its business partners and riders across 3 continents.",responsibilities:["Create a globally scalable/high concurrent Web and IoT solutions using .NET Core, Azure IoT Hub, Angular and other Azure products.","Create identity solutions using OAuth for inhouse products and integrations.","Participate in recruitment process to help set up the best engineering team both onshore and offshore.","Mentoring team, perform code review to ensure code quality and review/improve engineering practices."],achievements:[]},{type:"Experience",id:"cape",logoUrl:"".concat(n),companyName:"Cape Technologies",companyShort:"Cape",role:"Lead Software Engineer",roleShort:"Lead Engineer",yearFrom:"Nov 2020",yearTo:"Sep 2021",skills:[m.ng,m.net,m.nodejs,m.cs,m.ts,m.gcloud,m.firebase,m.sql],summary:"Cape is an early stage startup looking to\n            launch a BNPL product for Small and Medium Businesses in the\n            APAC region. I have been part of their journey since the very\n            beginning of the product development working closely with the\n            founders. I joined as a\n            Full time employee in July 2021.",responsibilities:["Create web and mobile solutions using Angular, Ionic, NodeJS, .NET Core, Firebase, SQL Server and Google Cloud.","Take part in brainstorming sessions with the Executives to find quick win solutions and devise plans for implementing long term solutions.","Guide offshore and onshore teams in designing and implementing the solutions."],achievements:[]},{type:"Experience",id:"woolies",logoUrl:"".concat(s),companyName:"WooliesX",companyShort:"WooliesX",role:"Senior Software Engineer",roleShort:"Senior Engineer",yearFrom:"July 2020",yearTo:"July 2021",skills:[m.ng,m.net,m.cs,m.ts,m.az,m.servicebus,m.sql,m.cos],summary:"WooliesX is the digital arm of Woolworths working towards creating better everyday experiences for its customers. \n                I worked as a Senior Software Engineer with the <em>Subscriptions</em> and <em>Checkout</em> squad.",responsibilities:["Help team in creating high performant, scalable and resilient solutions for the Checkout page and side cart/trolley.","Create intuitive and multi tenant solutions for Subscriptions.","Develop accessible features using Angular11, .NET Core and Azure cloud services.","Take part in cross squad collaborations to design and implement end to end solutions."],achievements:[]},{type:"Experience",id:"flare",logoUrl:"".concat(a),companyName:"Flare",companyShort:"Flare",role:"Senior Software Engineer",roleShort:"Senior Engineer",yearFrom:"Oct 2019",yearTo:"July 2020",skills:[m.ng,m.net,m.cs,m.ts,m.az,m.servicebus,m.sql,m.cos],summary:"Flare provides leading HR software and Superannuation products to help both employers and employees alike.",responsibilities:["Following a decentralized team style, work with stakeholders to understand the requirements and help team in designing the application architecture.","Develop features/microservices in Azure using Angular8, .NET Core and cloud services like Azure Functions, CosmosDB, etc."],achievements:["Fast tracked and delivered a time sensitive project within 6 months which helps Flare to manage its Superannuation memebers and financial transactions."]},{type:"Experience",id:"medical-director",logoUrl:"".concat(r),companyName:"Medical Director",companyShort:"Medical Dir.",role:"Lead/Senior Software Engineer",roleShort:"Lead/Senior Engg.",yearFrom:"Dec 2018",yearTo:"Oct 2019",skills:[m.ng,m.net,m.cs,m.ts,m.az,m.servicebus,m.sql,m.cos],summary:"Ranked #2 on 2018 AFR’s Most Innovative Companies List, Medical Director is a name well \n                known among GPs, Specialists and Hospitals in Australia. Helix is the web platform that helps \n                doctors in managing patients’ records, prescribing medications and doing all other different \n                scenarios that need to be addressed in a patient consultation.",responsibilities:["Lead 6+ members team spread across onshore (Sydney) and offshore (India) locations by helping them in Designing features, assisting in Sprint Planning and assisting Product Owner with PI (Program Increment) planning.","Develop features using Angular7, .NET Core, Azure SQL Database and NServiceBus (messaging)."],achievements:["Worked with a colleague, as part of the Software Academy initiative, which is separate to regular team activities, to create a Load Testing framework using Locust, Python and .NET Core","Early adopter of Trunk Based Development in the company to help speed up the delivery time"]},{type:"Experience",id:"brilliance",logoUrl:"".concat(o),companyName:"Brilliance Fin Tech",companyShort:"Brilliance",role:"Lead/Senior Software Engineer",roleShort:"Lead/Senior Engg.",yearFrom:"Jan 2015",yearTo:"Dec 2018",skills:[m.ng,m.net,m.cs,m.ts,m.az,m.servicebus,m.sql],summary:"Brilliance Fin Tech is a leading provider of loan pricing solutions to Banks worldwide. \n                Dealpoint, the application platform, helps Relationship Managers to create deals that are best \n                for both the banks and its customers.",responsibilities:["Lead different development teams from time to time based on active client projects and goals.","Develop new features using Angular/AngularJS, Typescript, CSS3, .NET Web Api and SQL Server 2012/2014."],achievements:["Considered a champion in solving Performance issues with existing or legacy application components"]},{type:"Experience",id:"hcl",logoUrl:"".concat(l),companyName:"HCL Technologies",companyShort:"HCL",role:"Senior Software Engineer",roleShort:"Senior Engineer",yearFrom:"Jan 2010",yearTo:"Jan 2015",skills:[m.ng,m.netframework,m.jq,m.cs,m.ts,m.sql],summary:'HCL is a leading software services company that provides custom solutions to its customers. \n                As HCL is a services company, I have played different roles during my tenure at HCL working for \n                Commonwealth Bank of Australia <img src="'.concat(c,'" class="cba">'),responsibilities:["Develop ASP.NET 3.5 web applications for CommBank platform like School Banking, Credit card comparison, etc.","Develop .NET Winform applications using .NET 2.0, PLSQL 7.0 and Oracle 10g."],achievements:[]},{type:"Credits",id:"credits",credits:['<div>Icons made by \n                <a href="https://www.flaticon.com/authors/pixel-perfect" title="Pixel perfect">\n                Pixel perfect</a> from \n                <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a></div>']}],e}(),u=function(){function e(){}return e.experienceNavTemplate='\n    <div class="chapter-nav" id="{id}">\n        <div class="company">\n            <img src="{logoUrl}" alt="Company Logo" class="logo">\n            <span class="name">{companyShort}</span>\n        </div>\n        <div class="role">{roleShort}</div>\n    </div>',e.defaultNavTemplate='\n    <div class="chapter-nav default" id="{id}">\n        {type}\n    </div>\n    ',e.chapterNavsTemplate="\n    <div>{chapterNavTemplate}</div>\n    ",e.skillTemplate='<span class="logo {skillId}-logo"></span>',e.responsibilityTemplate="<li>{responsibility}</li>",e.achievementTemplate="<li>{achievement}</li>",e.educationTemplate="<li>{education}</li>",e.creditTemplate="<li>{credit}</li>",e.certificationTemplate='\n    <li>\n        <a href="{externalLink}" class="cert-link" target="_blank"><span class="cert-name">{name}</span></a>\n        <span class="cert-since"><em>{validSince}</em></span>\n    </li>',e.skillSummaryTemplate='\n    <li>\n        <span class="logo {name}-logo"></span>\n        <span class="skill-description">{description}</span>\n        <span class="skill-proficiency">{proficiency} <em>({years} yrs)</em></span>\n    </li>',e.introTemplate='\n    <article class="chapter-details">\n        <h2>Introduction</h2>\n\n        <div class="summary">{summary}</div>\n\n        <h4 class="mb-0">Education</h4>\n        <ul class="education mt-0">{educationTemplate}</ul>\n\n        <h4 class="mb-0">Certifications</h4>\n        <ul class="certifications mt-0">{certificationTemplate}</ul>\n    </article>\n    ',e.skillsSummaryTemplate='\n    <article class="chapter-details">\n        <h2>Skills</h2>\n\n        <ul class="skills-summary">{skillSummaryTemplate}</ul>\n    </article>\n    ',e.creditsTemplate='\n    <article class="chapter-details">\n        <ul class="credits">{creditTemplate}</ul>\n    </article>\n    ',e.chapterDetailsTemplate='\n    <article class="chapter-details">\n            <div class="company">\n                <img src="{logoUrl}" alt="Company Logo" class="logo {id}">\n                <span class="name">{companyName}</span>\n            </div>\n\n            <div class="role">{role}</div>\n\n            <div class="year">\n                <span class="year-from">{yearFrom}</span>\n                -\n                <span class="year-to">{yearTo}</span>\n            </div>\n\n            <div class="skills">{skillTemplate}</div>\n\n            <div class="summary">{summary}</div>\n\n            <h4 class="mb-0">Responsibilities</h4>\n            <ul class="responsibilities mt-0">{responsibilityTemplate}</ul>\n\n            <h4 class="mb-0" id="achievements-header">Achievements</h4>\n            <ul class="achievements mt-0">{achievementTemplate}</ul>\n        </article>\n    ',e}();(new(function(){function e(){this.navHeight=108.5,this.numOfChaptersDisplayed=5}return e.prototype.init=function(){var e=this;this.showNav();for(var t=document.getElementsByClassName("chapter-nav"),i=function(i){var n=t[i].id;t[i].addEventListener("click",(function(){return e.showChapter(n)}))},n=0;n<t.length;n++)i(n);this.addClickHandler("speaker_btn",this.toggleSpeaker),this.isMute()&&this.toggleSpeaker(),this.addClickHandler("scroll_up",this.scrollUp),this.addClickHandler("scroll_down",this.scrollDown),this.addClickHandler("side_nav_btn",this.toggleSideNav),document.documentElement.style.setProperty("--nav-max-height",this.navHeight*this.numOfChaptersDisplayed+"px"),this.showChapter("intro",!0)},e.prototype.toggleSideNav=function(){var e="hide-sm-animate",t=document.getElementById("nav");(null==t?void 0:t.classList.contains(e))?t.classList.remove(e):null==t||t.classList.add(e)},e.prototype.showNav=function(){for(var e=this,t=[],i=function(i){var n=i,s=u.defaultNavTemplate;"Experience"===i.type&&(s=u.experienceNavTemplate),Object.keys(n).forEach((function(t){var i=n[t];s=e.replace(s,t,i)})),t.push(s)},n=0,s=d.items;n<s.length;n++)i(s[n]);document.getElementById("chapter-navs").innerHTML=t.join("")},e.prototype.addClickHandler=function(e,t){document.getElementById(e).addEventListener("click",t.bind(this))},e.prototype.scrollDown=function(){var e=this.getCurrentScrollPos()-this.navHeight;this.setCurrentScrollPos(e)},e.prototype.scrollUp=function(){var e=this.getCurrentScrollPos()+this.navHeight;this.setCurrentScrollPos(e)},e.prototype.getCurrentScrollPos=function(){return parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--nav-translate").split("px")[0])},e.prototype.setCurrentScrollPos=function(e){var t=-1*(d.items.length-this.numOfChaptersDisplayed)*this.navHeight;e>=0?(e=0,this.disableBtn("scroll_up")):e<=t?(e=t,this.disableBtn("scroll_down")):this.enableScrollBtns(),this.playSound("film_rolling"),document.documentElement.style.setProperty("--nav-translate","".concat(e,"px"))},e.prototype.disableBtn=function(e){document.getElementById(e).classList.add("disabled")},e.prototype.enableScrollBtns=function(){document.getElementById("scroll_up").classList.remove("disabled"),document.getElementById("scroll_down").classList.remove("disabled")},e.prototype.toggleSpeaker=function(){this.playSound("unmute_audio",!0);var e=document.getElementById("speaker-close");"none"===e.style.display?(e.style.display="inline-block",localStorage.setItem("speakerMute","true")):(e.style.display="none",localStorage.setItem("speakerMute","false"))},e.prototype.isMute=function(){return"true"===localStorage.getItem("speakerMute")},e.prototype.playSound=function(e,t){if(void 0===t&&(t=!1),t||!this.isMute()){var i=document.getElementById(e);i&&(i.volume=.2,i.play())}},e.prototype.showChapter=function(e,t){var i;void 0===t&&(t=!1),t||(this.toggleSideNav(),this.playSound("click_audio"));var n=d.items.filter((function(t){return t.id===e}))[0];"Experience"===n.type?this.showExperienceChapter(n):"Intro"===n.type?this.showIntroChapter(n):"Skills"===n.type?this.showSkillsChapter(n):"Credits"===n.type&&this.showCreditsChapter(n);for(var s=0,a=document.getElementsByClassName("chapter-nav");s<a.length;s++)a[s].classList.remove("selected");null===(i=document.getElementById(e))||void 0===i||i.classList.add("selected")},e.prototype.showIntroChapter=function(e){var t=u.introTemplate;t=this.replaceWithInstanceProps(t,e),t=this.replaceList(t,"{educationTemplate}",u.educationTemplate,"education",e.education,(function(e){return e})),t=this.replaceList(t,"{certificationTemplate}",u.certificationTemplate,"",e.certifications,(function(e){return e})),this.loadTemplate(t)},e.prototype.showSkillsChapter=function(e){var t=u.skillsSummaryTemplate;t=this.replaceWithInstanceProps(t,e),t=this.replaceList(t,"{skillSummaryTemplate}",u.skillSummaryTemplate,"",e.skills,(function(e){return e})),this.loadTemplate(t)},e.prototype.showExperienceChapter=function(e){var t=u.chapterDetailsTemplate;t=this.replaceWithInstanceProps(t,e),t=this.replaceList(t,"{skillTemplate}",u.skillTemplate,"skillId",e.skills,(function(e){return e})),t=this.replaceList(t,"{responsibilityTemplate}",u.responsibilityTemplate,"responsibility",e.responsibilities,(function(e){return e})),t=this.replaceList(t,"{achievementTemplate}",u.achievementTemplate,"achievement",e.achievements,(function(e){return e})),this.loadTemplate(t),(!e.achievements||e.achievements.length<=0)&&(document.getElementById("achievements-header").style.display="none")},e.prototype.showCreditsChapter=function(e){var t=u.creditsTemplate;t=this.replaceWithInstanceProps(t,e),t=this.replaceList(t,"{creditTemplate}",u.creditTemplate,"credit",e.credits,(function(e){return e})),this.loadTemplate(t)},e.prototype.loadTemplate=function(e){document.getElementById("main").innerHTML=e},e.prototype.replaceWithInstanceProps=function(e,t){var i=this,n=e;return Object.keys(t).forEach((function(e){var s=t[e];n=i.replace(n,e,s)})),n},e.prototype.replaceList=function(e,t,i,n,s,a){var r=this,o=[];s.forEach((function(e){var t,s=a(e);t="object"==typeof s?r.replaceWithInstanceProps(i,s):r.replace(i,n,s),o.push(t)}));var l=e.split(t);return l.splice.apply(l,function(e,t,i){if(i||2===arguments.length)for(var n,s=0,a=t.length;s<a;s++)!n&&s in t||(n||(n=Array.prototype.slice.call(t,0,s)),n[s]=t[s]);return e.concat(n||Array.prototype.slice.call(t))}([1,0],o,!1)),l.join("")},e.prototype.replace=function(e,t,i){return e.replace("{".concat(t,"}"),i)},e}())).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,